{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\programming\\\\git clone\\\\mong-geul\\\\Client\\\\src\\\\contexts\\\\modalContext.tsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ModalsDispatchContext = /*#__PURE__*/createContext({\n  open: () => {\n    return;\n  },\n  close: () => {\n    return;\n  }\n});\nexport const ModalsStateContext = /*#__PURE__*/createContext(null);\nconst ModalsProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [isModalOpen, setIsModalOpen] = useState([]);\n  const openModal = (Component, props) => {\n    setOpenedModals(modals => {\n      return [...modals, {\n        Component,\n        props\n      }];\n    });\n  };\n  const closeModal = Component => {\n    setOpenedModals(modals => {\n      return modals.filter(modal => modal.Component !== Component);\n    });\n  };\n  const dispatch = {\n    openModal,\n    closeModal\n  };\n  return /*#__PURE__*/_jsxDEV(ModalsStateContext.Provider, {\n    value: openedModals,\n    children: /*#__PURE__*/_jsxDEV(ModalsDispatchContext.Provider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(ModalsProvider, \"tEDaz6eHX8yddZo8QCJ+u2V1eRE=\");\n_c = ModalsProvider;\nexport default ModalsProvider;\n\n/* interface openFunc {\r\n    (Component: ReactNode, props: string[]): void\r\n}\r\n\r\ninterface modalDispatchContext {\r\n   open():void,\r\n   close():void,\r\n}\r\n\r\ninterface openedModal {\r\n    Component: ReactNode,\r\n    props: any,\r\n}\r\n\r\ninterface modalsProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\nexport const ModalsDispatchContext= createContext({} as modalDispatchContext)\r\n\r\nexport const ModalsStateContext = createContext([]);\r\n\r\n\r\nconst ModalsProvider = ({ children }:modalsProviderProps) => {\r\n    const [openedModals, setOpenedModals] = useState<openedModal[]>([]);\r\n    //컴포넌트와, 거기에 넘겨줄 props를 state에 저장\r\n\r\n    const open: openFunc = (Component, props) => {\r\n        setOpenedModals((modals) => {\r\n            return [...modals, { Component, props }];\r\n        });\r\n    };\r\n\r\n    const close = (Component: ReactNode) => {\r\n        setOpenedModals((modals) => {\r\n            return modals.filter((modal) => {\r\n                return modals.Component !== Component;\r\n            })\r\n        })\r\n    }\r\n\r\n    const dispatch = useMemo(() => ({open, close}), []);\r\n\r\n\r\n    return (\r\n        <ModalsStateContext.Provider value={openedModals}>\r\n            <ModalsDispatchContext.Provider value={dispatch}>\r\n                {children}\r\n            </ModalsDispatchContext.Provider>\r\n        </ModalsStateContext.Provider>\r\n    )\r\n}\r\n\r\nexport default ModalsProvider; */\nvar _c;\n$RefreshReg$(_c, \"ModalsProvider\");","map":{"version":3,"names":["createContext","useState","jsxDEV","_jsxDEV","ModalsDispatchContext","open","close","ModalsStateContext","ModalsProvider","_ref","_s","children","isModalOpen","setIsModalOpen","openModal","Component","props","setOpenedModals","modals","closeModal","filter","modal","dispatch","Provider","value","openedModals","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/programming/git clone/mong-geul/Client/src/contexts/modalContext.tsx"],"sourcesContent":["import { ReactElement, createContext, useState, useMemo } from 'react';\r\n\r\ninterface ModalsProviderProps {\r\n    children: ReactElement | ReactElement[]\r\n}\r\n\r\ninterface ModalsStateType {\r\n    Component: ReactElement,\r\n    props: { [key:string]: any},\r\n}\r\n\r\nexport const ModalsDispatchContext = createContext<{\r\n    open: (Component: ReactElement, props: { [key:string]: any}) => void;\r\n    close: (Component: ReactElement) => void;\r\n}>({\r\n    open: () => {return;},\r\n    close:() => {return;}\r\n});\r\n\r\nexport const ModalsStateContext = createContext<ModalsStateType[] | null>(null)\r\n\r\nconst ModalsProvider = ({children}:ModalsProviderProps) => {\r\n    const [isModalOpen, setIsModalOpen] = useState<ModalsStateType[]>([]);\r\n\r\n    const openModal = (\r\n        Component: ReactElement,\r\n        props: { [key:string]: any},\r\n    ) => {\r\n        setOpenedModals(modals => {\r\n            return [...modals, {Component, props}];\r\n        });\r\n    };\r\n\r\n    const closeModal = (Component: ReactElement) => {\r\n        setOpenedModals(modals => {\r\n            return modals.filter(modal => modal.Component !== Component);\r\n        })\r\n    }\r\n\r\n    const dispatch = { openModal, closeModal };\r\n\r\n    return (\r\n        <ModalsStateContext.Provider value={openedModals}>\r\n            <ModalsDispatchContext.Provider value={dispatch}>\r\n                {children}\r\n            </ModalsDispatchContext.Provider>\r\n        </ModalsStateContext.Provider>\r\n    )\r\n}\r\n\r\nexport default ModalsProvider;\r\n\r\n/* interface openFunc {\r\n    (Component: ReactNode, props: string[]): void\r\n}\r\n\r\ninterface modalDispatchContext {\r\n   open():void,\r\n   close():void,\r\n}\r\n\r\ninterface openedModal {\r\n    Component: ReactNode,\r\n    props: any,\r\n}\r\n\r\ninterface modalsProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\nexport const ModalsDispatchContext= createContext({} as modalDispatchContext)\r\n\r\nexport const ModalsStateContext = createContext([]);\r\n\r\n\r\nconst ModalsProvider = ({ children }:modalsProviderProps) => {\r\n    const [openedModals, setOpenedModals] = useState<openedModal[]>([]);\r\n    //컴포넌트와, 거기에 넘겨줄 props를 state에 저장\r\n\r\n    const open: openFunc = (Component, props) => {\r\n        setOpenedModals((modals) => {\r\n            return [...modals, { Component, props }];\r\n        });\r\n    };\r\n\r\n    const close = (Component: ReactNode) => {\r\n        setOpenedModals((modals) => {\r\n            return modals.filter((modal) => {\r\n                return modals.Component !== Component;\r\n            })\r\n        })\r\n    }\r\n\r\n    const dispatch = useMemo(() => ({open, close}), []);\r\n\r\n\r\n    return (\r\n        <ModalsStateContext.Provider value={openedModals}>\r\n            <ModalsDispatchContext.Provider value={dispatch}>\r\n                {children}\r\n            </ModalsDispatchContext.Provider>\r\n        </ModalsStateContext.Provider>\r\n    )\r\n}\r\n\r\nexport default ModalsProvider; */"],"mappings":";;AAAA,SAAuBA,aAAa,EAAEC,QAAQ,QAAiB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAWvE,OAAO,MAAMC,qBAAqB,gBAAGJ,aAAa,CAG/C;EACCK,IAAI,EAAEA,CAAA,KAAM;IAAC;EAAO,CAAC;EACrBC,KAAK,EAACA,CAAA,KAAM;IAAC;EAAO;AACxB,CAAC,CAAC;AAEF,OAAO,MAAMC,kBAAkB,gBAAGP,aAAa,CAA2B,IAAI,CAAC;AAE/E,MAAMQ,cAAc,GAAGC,IAAA,IAAoC;EAAAC,EAAA;EAAA,IAAnC;IAACC;EAA4B,CAAC,GAAAF,IAAA;EAClD,MAAM,CAACG,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAoB,EAAE,CAAC;EAErE,MAAMa,SAAS,GAAGA,CACdC,SAAuB,EACvBC,KAA2B,KAC1B;IACDC,eAAe,CAACC,MAAM,IAAI;MACtB,OAAO,CAAC,GAAGA,MAAM,EAAE;QAACH,SAAS;QAAEC;MAAK,CAAC,CAAC;IAC1C,CAAC,CAAC;EACN,CAAC;EAED,MAAMG,UAAU,GAAIJ,SAAuB,IAAK;IAC5CE,eAAe,CAACC,MAAM,IAAI;MACtB,OAAOA,MAAM,CAACE,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACN,SAAS,KAAKA,SAAS,CAAC;IAChE,CAAC,CAAC;EACN,CAAC;EAED,MAAMO,QAAQ,GAAG;IAAER,SAAS;IAAEK;EAAW,CAAC;EAE1C,oBACIhB,OAAA,CAACI,kBAAkB,CAACgB,QAAQ;IAACC,KAAK,EAAEC,YAAa;IAAAd,QAAA,eAC7CR,OAAA,CAACC,qBAAqB,CAACmB,QAAQ;MAACC,KAAK,EAAEF,QAAS;MAAAX,QAAA,EAC3CA;IAAQ;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACmB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEtC,CAAC;AAAAnB,EAAA,CA3BKF,cAAc;AAAAsB,EAAA,GAAdtB,cAAc;AA6BpB,eAAeA,cAAc;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArDA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}