{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\programming\\\\git clone\\\\mong-geul\\\\Client\\\\src\\\\components\\\\wakeupTimeSetting.component.tsx\",\n  _s = $RefreshSig$();\nimport { useContext, useState } from \"react\";\nimport { DispatchContext } from \"../contexts/wakeupTime.context\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n  display: flex;\n`;\nconst ButtonBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  input {\n    width: 56px;\n  }\n`;\nconst MDbox = styled.div`\n  background-color: white;\n  display: flex;\n  width: 56px;\n  padding: 12px 16px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n  border-radius: 4px;\n  border: 0.4px solid var(--gray-1, #4d4d4d);\n`;\nconst MiniButton = _ref => {\n  let {\n    name,\n    type,\n    onClick\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    name: name,\n    onClick: onClick,\n    children: type\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_c = MiniButton;\nconst WakeupTimeSetting = () => {\n  _s();\n  const dispatch = useContext(DispatchContext);\n  if (!dispatch) throw new Error(\"dispatch is null\");\n  const DEFAULT = {\n    hour: 8,\n    minute: 0,\n    md: \"AM\"\n  };\n  const [time, setTime] = useState(DEFAULT);\n  const {\n    hour,\n    minute,\n    md\n  } = time;\n\n  /* const { hour, minute, md } = useContext(WakeUpTimeContext);\r\n    useEffect(() => {\r\n    console.log(\"re-rendered\");\r\n  }, [hour, minute, md]); */\n\n  const onChange = e => {\n    setTime({\n      ...time,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  /* return (\r\n    <Wrapper>\r\n      <ButtonBox>\r\n        <MiniButton\r\n          name=\"up\"\r\n          type={<Up />}\r\n          onClick={() => dispatch({ type: \"HOUR_INCREASE\" })}\r\n        />\r\n        <input name=\"hour\" type=\"number\" value={hour} onChange={onChange}></input>\r\n        <MiniButton\r\n          name=\"down\"\r\n          type={<Down />}\r\n          onClick={() => dispatch({ type: \"HOUR_DECREASE\" })}\r\n        />\r\n      </ButtonBox>\r\n        <ButtonBox>\r\n        <MiniButton\r\n          name=\"up\"\r\n          type={<Up />}\r\n          onClick={() => dispatch({ type: \"MINUTE_INCREASE\" })}\r\n        />\r\n        <input name=\"minute\" type=\"number\" value={minute}></input>\r\n        <MiniButton\r\n          name=\"down\"\r\n          type={<Down />}\r\n          onClick={() => dispatch({ type: \"MINUTE_DECREASE\" })}\r\n        />\r\n      </ButtonBox>\r\n        <ButtonBox>\r\n        <MDbox onClick={() => dispatch({ type: \"CHANGE_TO_AM\" })}>AM</MDbox>\r\n        <MDbox onClick={() => dispatch({ type: \"CHANGE_TO_PM\" })}>PM</MDbox>\r\n      </ButtonBox>\r\n    </Wrapper>\r\n  ); */\n};\n_s(WakeupTimeSetting, \"wJx3bi3Vm0f+HTgGNHP+9+kPSqI=\");\n_c2 = WakeupTimeSetting;\nexport default WakeupTimeSetting;\nvar _c, _c2;\n$RefreshReg$(_c, \"MiniButton\");\n$RefreshReg$(_c2, \"WakeupTimeSetting\");","map":{"version":3,"names":["useContext","useState","DispatchContext","styled","jsxDEV","_jsxDEV","Wrapper","div","ButtonBox","MDbox","MiniButton","_ref","name","type","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","WakeupTimeSetting","_s","dispatch","Error","DEFAULT","hour","minute","md","time","setTime","onChange","e","target","value","_c2","$RefreshReg$"],"sources":["C:/Users/user/Desktop/programming/git clone/mong-geul/Client/src/components/wakeupTimeSetting.component.tsx"],"sourcesContent":["import { ReactComponent as Up } from \"../icons/Expand_Up.svg\";\r\nimport { ReactComponent as Down } from \"../icons/Expand_Down.svg\";\r\nimport { ReactNode, useContext, useEffect, useState, useRef } from \"react\";\r\nimport {\r\n  DispatchContext,\r\n  WakeUpTimeContext,\r\n} from \"../contexts/wakeupTime.context\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst ButtonBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  input {\r\n    width: 56px;\r\n  }\r\n`;\r\n\r\nconst MDbox = styled.div`\r\n  background-color: white;\r\n  display: flex;\r\n  width: 56px;\r\n  padding: 12px 16px;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 10px;\r\n  border-radius: 4px;\r\n  border: 0.4px solid var(--gray-1, #4d4d4d);\r\n`;\r\n\r\ninterface MiniButtonProps {\r\n  type: ReactNode;\r\n  onClick(): void;\r\n  name: string;\r\n}\r\n\r\nconst MiniButton = ({ name, type, onClick }: MiniButtonProps) => {\r\n  return (\r\n    <button name={name} onClick={onClick}>\r\n      {type}\r\n    </button>\r\n  );\r\n};\r\n\r\nconst WakeupTimeSetting = () => {\r\n  const dispatch = useContext(DispatchContext);\r\n  if (!dispatch) throw new Error(\"dispatch is null\");\r\n\r\n  const DEFAULT = {\r\n    hour:8, minute:0, md:\"AM\"\r\n  }\r\n  const [time, setTime] = useState(DEFAULT);\r\n  const { hour, minute, md } = time;\r\n\r\n  /* const { hour, minute, md } = useContext(WakeUpTimeContext);\r\n\r\n  useEffect(() => {\r\n    console.log(\"re-rendered\");\r\n  }, [hour, minute, md]); */\r\n\r\n  const onChange = (e:any) => {\r\n    setTime({...time, [e.target.name]:e.target.value})\r\n  }\r\n\r\n  /* return (\r\n    <Wrapper>\r\n      <ButtonBox>\r\n        <MiniButton\r\n          name=\"up\"\r\n          type={<Up />}\r\n          onClick={() => dispatch({ type: \"HOUR_INCREASE\" })}\r\n        />\r\n        <input name=\"hour\" type=\"number\" value={hour} onChange={onChange}></input>\r\n        <MiniButton\r\n          name=\"down\"\r\n          type={<Down />}\r\n          onClick={() => dispatch({ type: \"HOUR_DECREASE\" })}\r\n        />\r\n      </ButtonBox>\r\n\r\n      <ButtonBox>\r\n        <MiniButton\r\n          name=\"up\"\r\n          type={<Up />}\r\n          onClick={() => dispatch({ type: \"MINUTE_INCREASE\" })}\r\n        />\r\n        <input name=\"minute\" type=\"number\" value={minute}></input>\r\n        <MiniButton\r\n          name=\"down\"\r\n          type={<Down />}\r\n          onClick={() => dispatch({ type: \"MINUTE_DECREASE\" })}\r\n        />\r\n      </ButtonBox>\r\n\r\n      <ButtonBox>\r\n        <MDbox onClick={() => dispatch({ type: \"CHANGE_TO_AM\" })}>AM</MDbox>\r\n        <MDbox onClick={() => dispatch({ type: \"CHANGE_TO_PM\" })}>PM</MDbox>\r\n      </ButtonBox>\r\n    </Wrapper>\r\n  ); */\r\n};\r\n\r\nexport default WakeupTimeSetting;\r\n"],"mappings":";;AAEA,SAAoBA,UAAU,EAAaC,QAAQ,QAAgB,OAAO;AAC1E,SACEC,eAAe,QAEV,gCAAgC;AAEvC,OAAOC,MAAM,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,OAAO,GAAGH,MAAM,CAACI,GAAI;AAC3B;AACA,CAAC;AAED,MAAMC,SAAS,GAAGL,MAAM,CAACI,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAME,KAAK,GAAGN,MAAM,CAACI,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAQD,MAAMG,UAAU,GAAGC,IAAA,IAA8C;EAAA,IAA7C;IAAEC,IAAI;IAAEC,IAAI;IAAEC;EAAyB,CAAC,GAAAH,IAAA;EAC1D,oBACEN,OAAA;IAAQO,IAAI,EAAEA,IAAK;IAACE,OAAO,EAAEA,OAAQ;IAAAC,QAAA,EAClCF;EAAI;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEb,CAAC;AAACC,EAAA,GANIV,UAAU;AAQhB,MAAMW,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAMC,QAAQ,GAAGvB,UAAU,CAACE,eAAe,CAAC;EAC5C,IAAI,CAACqB,QAAQ,EAAE,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;EAElD,MAAMC,OAAO,GAAG;IACdC,IAAI,EAAC,CAAC;IAAEC,MAAM,EAAC,CAAC;IAAEC,EAAE,EAAC;EACvB,CAAC;EACD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAG7B,QAAQ,CAACwB,OAAO,CAAC;EACzC,MAAM;IAAEC,IAAI;IAAEC,MAAM;IAAEC;EAAG,CAAC,GAAGC,IAAI;;EAEjC;AACF;AACA;AACA;;EAGE,MAAME,QAAQ,GAAIC,CAAK,IAAK;IAC1BF,OAAO,CAAC;MAAC,GAAGD,IAAI;MAAE,CAACG,CAAC,CAACC,MAAM,CAACrB,IAAI,GAAEoB,CAAC,CAACC,MAAM,CAACC;IAAK,CAAC,CAAC;EACpD,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,CAAC;AAACZ,EAAA,CAxDID,iBAAiB;AAAAc,GAAA,GAAjBd,iBAAiB;AA0DvB,eAAeA,iBAAiB;AAAC,IAAAD,EAAA,EAAAe,GAAA;AAAAC,YAAA,CAAAhB,EAAA;AAAAgB,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}