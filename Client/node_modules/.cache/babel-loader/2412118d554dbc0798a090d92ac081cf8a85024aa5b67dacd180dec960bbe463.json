{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\programming\\\\git clone\\\\mong-geul\\\\Client\\\\src\\\\components\\\\sleepingTimeBox.component.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useContext } from \"react\";\nimport { ReactComponent as Refresh } from \"../icons/Refresh.svg\";\nimport { WakeUpTimeContext } from \"../contexts/wakeupTimeReducer.context\";\nimport { useModal } from \"../hooks/useModal\";\nimport { ReactComponent as Expand } from \"../icons/Expand.svg\";\nimport { WakeupBox, WakeupSetting, SleepingComent, SleepingHour, NickNameText, Text } from \"../styles/sleepingTimeBox.styles\";\nimport WakeupSetting2 from \"./wakeupSetting2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SleepingTimeBox = () => {\n  _s();\n  let Data = JSON.parse(localStorage.getItem('user-wakeup-time') || '{}');\n  const {\n    Modal,\n    isModalOpen,\n    openModal,\n    closeModal,\n    successFunc\n  } = useModal();\n  let {\n    hour,\n    minute,\n    md\n  } = useContext(WakeUpTimeContext);\n  let USER_NAME = \"꿈꾸는 여행자\";\n  //유저 닉네임 GET\n  /* useEffect(() => {\r\n    async function getUserName() {\r\n      const res = await axios.get(\"\")\r\n    }\r\n    getUserName();\r\n  },[]) */\n\n  //현재시간\n  const [elapsedTime, setElapsedTime] = useState({\n    HOUR: 0,\n    MIN: 0\n  });\n  let {\n    HOUR,\n    MIN\n  } = elapsedTime;\n  let currentTime = null;\n  let today = new Date();\n  let year = today.getFullYear();\n  let month = today.getMonth() + 1;\n  let day = today.getDate();\n  let hours = today.getHours();\n  let minutes = today.getMinutes();\n  currentTime = new Date(year, month, day, hours, minutes);\n\n  //기상시간\n  let wakeupTime = null;\n  if (hours <= 11) {\n    //현재시각이 오전\n    if (md === \"PM\") {\n      wakeupTime = new Date(year, month, day, hour + 12, minute);\n    } else {\n      wakeupTime = new Date(year, month, day, hour + 12, minute);\n    }\n  } else {\n    //현재가 오후\n    if (md === \"PM\") {\n      wakeupTime = new Date(year, month, day + 1, hour + 12, minute);\n    } else {\n      wakeupTime = new Date(year, month, day + 1, hour, minute);\n    }\n  }\n\n  //시간차 계산\n  const elapsedMSec = wakeupTime.getTime() - currentTime.getTime();\n  const elapsedMin = elapsedMSec / (1000 * 60);\n  const elapsedHour = Math.floor(elapsedMSec / 1000 / 60 / 60);\n  HOUR = Math.floor(elapsedMSec / 1000 / 60 / 60);\n  MIN = elapsedMin - elapsedHour * 60;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(WakeupBox, {\n      children: [/*#__PURE__*/_jsxDEV(SleepingComent, {\n        children: [/*#__PURE__*/_jsxDEV(NickNameText, {\n          children: `${USER_NAME}님,`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Refresh, {\n          onClick: () => {\n            window.location.replace(\"/main\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          children: [\"\\uC9C0\\uAE08 \\uC7A0\\uB4E4\\uBA74\", \" \", /*#__PURE__*/_jsxDEV(SleepingHour, {\n            children: [`${HOUR}`, \"\\uC2DC\\uAC04 \", `${MIN}`, \"\\uBD84\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), \" \", \"\\uC5EC\\uD589\\uD560 \\uC218 \\uC788\\uC5B4\\uC694:)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WakeupSetting, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: openModal,\n          children: \"\\uAE30\\uC0C1\\uC2DC\\uAC04 \\uC124\\uC815\\uD558\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Expand, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      success: true,\n      width: \"330px\",\n      height: \"233px\",\n      background: \"#373543\",\n      textColor: \"#FFF\",\n      isModalOpen: isModalOpen,\n      successFunc: successFunc,\n      label: \"\\uAE30\\uC0C1 \\uC2DC\\uAC04 \\uC120\\uD0DD\",\n      additional: /*#__PURE__*/_jsxDEV(WakeupSetting2, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(SleepingTimeBox, \"FqeAOhXwLLljpBJxWSYQz48ueIM=\", false, function () {\n  return [useModal];\n});\n_c = SleepingTimeBox;\nexport default SleepingTimeBox;\nvar _c;\n$RefreshReg$(_c, \"SleepingTimeBox\");","map":{"version":3,"names":["useState","useContext","ReactComponent","Refresh","WakeUpTimeContext","useModal","Expand","WakeupBox","WakeupSetting","SleepingComent","SleepingHour","NickNameText","Text","WakeupSetting2","jsxDEV","_jsxDEV","Fragment","_Fragment","SleepingTimeBox","_s","Data","JSON","parse","localStorage","getItem","Modal","isModalOpen","openModal","closeModal","successFunc","hour","minute","md","USER_NAME","elapsedTime","setElapsedTime","HOUR","MIN","currentTime","today","Date","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","wakeupTime","elapsedMSec","getTime","elapsedMin","elapsedHour","Math","floor","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","window","location","replace","success","width","height","background","textColor","label","additional","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/programming/git clone/mong-geul/Client/src/components/sleepingTimeBox.component.tsx"],"sourcesContent":["import { useEffect, useState, useContext, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ReactComponent as Refresh } from \"../icons/Refresh.svg\";\r\n\r\nimport { WakeUpTimeContext } from \"../contexts/wakeupTimeReducer.context\";\r\nimport { useModal } from \"../hooks/useModal\";\r\nimport { ReactComponent as Expand } from \"../icons/Expand.svg\";\r\n\r\nimport {\r\n  WakeupBox,\r\n  WakeupSetting,\r\n  SleepingComent,\r\n  SleepingHour,\r\n  NickNameText,\r\n  Text,\r\n} from \"../styles/sleepingTimeBox.styles\";\r\nimport WakeupTimeSetting from \"./wakeupTimeSetting.component\";\r\nimport WakeupSetting2 from \"./wakeupSetting2\";\r\n\r\nconst SleepingTimeBox = () => {\r\n  let Data = JSON.parse(localStorage.getItem('user-wakeup-time') || '{}')\r\n  const { Modal, isModalOpen, openModal, closeModal, successFunc } = useModal();\r\n  let { hour, minute, md } = useContext(WakeUpTimeContext);\r\n \r\n \r\n\r\n  let USER_NAME = \"꿈꾸는 여행자\";\r\n  //유저 닉네임 GET\r\n  /* useEffect(() => {\r\n    async function getUserName() {\r\n      const res = await axios.get(\"\")\r\n    }\r\n    getUserName();\r\n  },[]) */\r\n\r\n  //현재시간\r\n  const [elapsedTime, setElapsedTime] = useState({ HOUR: 0, MIN: 0 });\r\n  let { HOUR, MIN } = elapsedTime;\r\n  \r\n  let currentTime = null;\r\n  let today = new Date();\r\n  let year = today.getFullYear();\r\n  let month = today.getMonth() + 1;\r\n  let day = today.getDate();\r\n  let hours = today.getHours();\r\n  let minutes = today.getMinutes();\r\n  currentTime = new Date(year, month, day, hours, minutes);\r\n\r\n  //기상시간\r\n  let wakeupTime = null;\r\n  if (hours <= 11) {\r\n    //현재시각이 오전\r\n    if (md === \"PM\") {\r\n      wakeupTime = new Date(year, month, day, hour + 12, minute);\r\n    } else {\r\n      wakeupTime = new Date(year, month, day, hour + 12, minute);\r\n    }\r\n  } else {\r\n    //현재가 오후\r\n    if (md === \"PM\") {\r\n      wakeupTime = new Date(year, month, day + 1, hour + 12, minute);\r\n    } else {\r\n      wakeupTime = new Date(year, month, day + 1, hour, minute);\r\n    }\r\n  }\r\n\r\n  //시간차 계산\r\n  const elapsedMSec = wakeupTime.getTime() - currentTime.getTime();\r\n  const elapsedMin = elapsedMSec / (1000 * 60);\r\n  const elapsedHour = Math.floor(elapsedMSec / 1000 / 60 / 60);\r\n\r\n  HOUR = Math.floor(elapsedMSec / 1000 / 60 / 60);\r\n  MIN = elapsedMin - elapsedHour * 60;\r\n\r\n  return (\r\n    <>\r\n      <WakeupBox>\r\n        <SleepingComent>\r\n          <NickNameText>{`${USER_NAME}님,`}</NickNameText>\r\n          <Refresh\r\n            onClick={() => {\r\n              window.location.replace(\"/main\");\r\n            }}\r\n          />\r\n          <br></br>\r\n          <Text>\r\n            지금 잠들면{\" \"}\r\n            <SleepingHour>\r\n              {`${HOUR}`}시간 {`${MIN}`}분\r\n            </SleepingHour>{\" \"}\r\n            여행할 수 있어요:)\r\n          </Text>\r\n        </SleepingComent>\r\n        <WakeupSetting>\r\n          <span onClick={openModal}>기상시간 설정하기</span>\r\n          <Expand />\r\n        </WakeupSetting>\r\n      </WakeupBox>\r\n\r\n      <Modal\r\n        success={true}\r\n        width=\"330px\"\r\n        height=\"233px\"\r\n        background=\"#373543\"\r\n        textColor=\"#FFF\"\r\n        isModalOpen={isModalOpen}\r\n        successFunc={successFunc}\r\n        label=\"기상 시간 선택\"\r\n        additional={<WakeupSetting2 />}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SleepingTimeBox;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}